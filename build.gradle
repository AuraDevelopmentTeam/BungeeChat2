import io.franzbecker.gradle.lombok.task.DelombokTask
import java.security.SecureRandom
import org.apache.tools.ant.filters.ReplaceTokens
import proguard.gradle.ProGuardTask

buildscript {
    repositories {
        mavenCentral()
    }
 
    dependencies {
        classpath "net.sf.proguard:proguard-gradle:5.3.3"
    }
}

plugins {
    id "io.franzbecker.gradle-lombok" version "1.8" apply false
}

def getBuild() {
    def build = 150
    def commits = "git rev-list --count HEAD".execute().text.trim()

    return (build + commits.toInteger()).toString()
}
def getFullVersion() {
    def baseVersion = "${version}_${build}"

    if("git status --porcelain".execute().text != "")
        baseVersion += "_SNAPSHOT"

    return baseVersion
}

allprojects {
    apply plugin: "java"
    apply plugin: "maven"
    apply plugin: "maven-publish"
    apply plugin: "signing"
    apply plugin: "eclipse"
    apply plugin: "idea"
    apply plugin: "io.franzbecker.gradle-lombok"

    group = "dev.aura.bungeechat"
    version = "2.0.0"
    
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    
    repositories {
        jcenter()
        mavenCentral()
    }
}

ext {
    build = getBuild()
    full_version = getFullVersion()
    shouldSign = project.hasProperty("signing.keyId") && project.hasProperty("signing.password") && project.hasProperty("signing.secretKeyRingFile")
}

subprojects {
    ext {
        build = rootProject.build
        full_version = rootProject.full_version
        shouldSign = rootProject.shouldSign
    }
}

description = """Bungee Chat"""

configurations {
    reTrace
}

repositories {
    maven {
        name "bungeecord-repo"
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        name "bungeeperms-repo"
        url "http://repo.wea-ondara.net/repository/public/"
    }
    maven {
        name "jitpack.io"
        url "https://jitpack.io"
    }
    maven {
        name "luck-repo"
        url "https://repo.lucko.me/"
    }
}

dependencies {
    compileOnly project(":BungeeChatApi")
    
    compileOnly "net.md-5:bungeecord-api:${bungeecoord_version}"
    
    compileOnly "net.alpenblock:BungeePerms:${bungeeperms_version}"
    compileOnly "com.github.CheeseSoftware:PowerfulPermsAPI:${powerfulperms_version}"
    compileOnly "me.lucko.luckperms:luckperms-api:${luckperms_version}"
    
    reTrace "net.sf.proguard:proguard-retrace:5.3.3"
}

allprojects {
    lombok {
        version = lombok_version
        sha256 = lombok_hash
    }
}

allprojects {
    processResources {
        // this will ensure that this task is redone when the versions change.
        inputs.property "version", version
        inputs.property "build", build
        
        expand "version": version, "build": build
    }

    task processSources (type: Sync) {
        inputs.property "version", version
        inputs.property "build", build
        ext.outputDir = file("$buildDir/generated-src")
        
        from sourceSets.main.allSource
        into outputDir
        filter (ReplaceTokens, tokens: [
            "version": version,
            "build": build
        ])
    }
    
    task delombok(type: DelombokTask, dependsOn: compileJava) {
        group "build"
        description "Generates Lombok free Java code from code with Lombok"
    
      	ext.outputDir = file("$buildDir/delombok")
        
      	outputs.dir(outputDir)
    		inputs.dir(processSources.outputDir)
    		args(processSources.outputDir, "-d", outputDir)
        
        compileConfigurationName = configurations.compileOnly.name
        
        doLast {
            fileTree(dir: outputDir, exclude: "**/*.java").forEach{file -> file.delete()}
        }
    }
    
    compileJava {
        source = processSources.outputs
        dependsOn processSources 
    }
    
    jar {
        from sourceSets.main.output
        
        version = full_version
    }
    
    task sourceJar (type: Jar, dependsOn: processSources) {
        group "build"
    
        from sourceSets.main.allSource
    
        classifier = "sources"
        version = jar.version
    }
    
    javadoc {
        dependsOn delombok
    
        source = delombok.outputDir
        classpath = sourceSets.main.compileClasspath
    }
    
    task javadocJar(type: Jar, dependsOn: javadoc) {
        group "build"
    
        from javadoc.destinationDir
        
        classifier = "javadoc"
        version = jar.version
    }
}

jar {
    from project(":BungeeChatApi").sourceSets.main.output
}

sourceJar {
    from project(":BungeeChatApi").sourceSets.main.allSource
}

javadoc {
    dependsOn project(":BungeeChatApi").delombok

    source += project(":BungeeChatApi").delombok.outputDir
    classpath += project(":BungeeChatApi").sourceSets.main.compileClasspath
}

task deobfJar (type: Jar, dependsOn: jar) {
    from sourceSets.main.output
    from project(":BungeeChatApi").sourceSets.main.output

    classifier = "deobf"
    version = jar.version
}

task proguard(type: ProGuardTask, dependsOn: deobfJar) {
    group "build"
    
    def dictonary = file("dictionary.txt")
    
    configuration "proguard.conf"

    // Inputs and outputs
    injars deobfJar.archivePath
    outjars jar.archivePath
    printmapping "${jar.archivePath}.map"
 
    // Libraries
    libraryjars configurations.compileOnly
    
    // Stuff that depends on the group name
    keep "class ${project.group}.api.** { *; }"
    repackageclasses project.group
    
    // No notes or warnings from classes that aren't ours!
    dontwarn "!class ${project.group}.**"
    dontnote "!class ${project.group}.**"
    
    // Obfuscation names. They'll be different for each version
    classobfuscationdictionary dictonary
    obfuscationdictionary dictonary
    
    jar.finalizedBy proguard
    
    doFirst {
        def firstChars = ('A'..'Z') + ('a'..'z')
        def allChars = firstChars + ('0'..'9')
        def rand = new SecureRandom(full_version.getBytes())
        def str
        def out = ""
    
        (1..10000).each {
            str = firstChars[rand.nextInt(firstChars.size())]
            
            (2..3).each {
                str += allChars[rand.nextInt(allChars.size())]
            }
        
            out += "${str}\n"
        }
        
        dictonary.text = out;
    }
    
    doLast {
       dictonary.delete() 
    }
}

artifacts {
    archives jar
}

allprojects {
    signing {
        required { shouldSign }
    
        sign configurations.archives
    }
    
    uploadArchives {
        repositories {
            mavenDeployer {
                if (shouldSign) {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                }
                if (project.hasProperty("local_maven")) {
                    repository(url: "file://${local_maven}")
                } else {
                    repository(url: "file://${rootProject.projectDir}/maven")
                }
                pom {
                    groupId = project.group
                    version = project.full_version
                    artifactId = project.archivesBaseName
                    project {
                        name project.archivesBaseName
                        packaging "jar"
                        description project.description
                        url "https://gitlab.brainstonemod.com/shawn-ian/BungeeChat"
                        scm {
                            url "https://gitlab.brainstonemod.com/shawn-ian/BungeeChat"
                            connection "scm:git:git@gitlab.brainstonemod.com:shawn-ian/BungeeChat.git"
                            developerConnection "scm:git:gitlab.brainstonemod.com:shawn-ian/BungeeChat.git"
                        }
                        issueManagement {
                            system "gitlab"
                            url "https://gitlab.brainstonemod.com/shawn-ian/BungeeChat/issues"
                        }
                        licenses {
                            license {
                                name "License"
                                url "???"
                                distribution "repo"
                            }
                        }
                        developers {
                            developer {
                                id "shawn_ian"
                                name "shawn_ian"
                                roles {
                                    role "owner"
                                    role "developer"
                                }
                            }
                            developer {
                                id "brainstone"
                                name "The_BrainStone"
                                roles {
                                    role "developer"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    test {
        beforeTest { descriptor ->
            logger.lifecycle("Running test: " + descriptor)
        }

        onOutput { descriptor, event ->
           logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
        }
    }
}

task reTrace(type: JavaExec) {
    group "help"
    description """Deobfuscates an obfuscated stacktrace
Specify "-Pmapping_file=<file>" (with quotes) to use a given mapping file. If not provided use (and generate if necessary) the mapping file of the current code.
Specify "-Pstacktrace_file=<file>" (with quotes) to specify the stacktrace file. If not provided "stacktrace.txt" (in the project root) is used."""

    classpath configurations.reTrace
    main = "proguard.retrace.ReTrace"
    
    def mapping_file
    def stacktrace_file
    
    if (project.hasProperty("mapping_file")) {
        mapping_file = project.mapping_file
    } else {
        dependsOn proguard
        
        mapping_file = "${jar.archivePath}.map"
    }
    
    if (project.hasProperty("stacktrace_file")) {
        stacktrace_file = project.stacktrace_file
    } else {
        stacktrace_file = "stacktrace.txt"
    }
    
    args mapping_file
    args stacktrace_file
}
