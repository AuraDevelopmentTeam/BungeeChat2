variables:
  GIT_SUBMODULE_STRATEGY: recursive
  ORIG_ARTIFACTS1: "$CI_PROJECT_DIR/**/build/libs/*.jar*"
  ORIG_ARTIFACTS2: "$CI_PROJECT_DIR/**/build/distributions/*.zip*"
  ARTIFACTS1: "$CI_PROJECT_DIR/*.jar*"
  ARTIFACTS2: "$CI_PROJECT_DIR/*.zip*"
  TEST_REPORTS: "$CI_PROJECT_DIR/*-TestReport.zip"
#  JACOCO_DATA: "$CI_PROJECT_DIR/**/build/jacoco/*"
  JACOCO_DATA1: "$CI_PROJECT_DIR/build/jacoco/*"
  JACOCO_DATA2: "$CI_PROJECT_DIR/*/build/jacoco/*"
  JACOCO_DATA3: "$CI_PROJECT_DIR/*/*/build/jacoco/*"
  COVERAGE_REPORTS: "$CI_PROJECT_DIR/*-CoverageReport.zip"
  SPOTBUGS_REPORTS: "$CI_PROJECT_DIR/*-SpotbugsReport.zip"
  JAVADOCS: "$CI_PROJECT_DIR/*-javadoc.jar"
  GRADLE_OPTS: >
    -Dorg.gradle.project.branchName="$CI_COMMIT_REF_NAME"

cache:
  key: "$CI_COMMIT_REF_NAME $CI_COMMIT_SHA"
  untracked: true

before_script:
  - shopt -s globstar
  - shopt -s nullglob

stages:
- build
- test
- report
- deploy

build:
  stage: build
  cache:
    policy: push
  script:
  - ./gradlew --console=plain assemble
  - cp $ORIG_ARTIFACTS1 $ORIG_ARTIFACTS2 .
  retry: 2
  when: on_success
  artifacts:
    paths:
    - $ARTIFACTS1
    - $ARTIFACTS2

test:
  stage: test
  cache:
    policy: pull-push
  script:
  - ./gradlew --continue --console=plain test
  retry: 2
  when: on_success
  artifacts:
    when: always
    paths:
    - $TEST_REPORTS
#    - $JACOCO_DATA
    - $JACOCO_DATA1
    - $JACOCO_DATA2
    - $JACOCO_DATA3

checkFormatting:
  stage: test
  cache:
    policy: pull
  script:
  - ./gradlew --continue --console=plain spotlessCheck
  allow_failure: true
  when: on_success

coverage:
  stage: report
  cache:
    policy: pull
  dependencies:
  - test
  script:
  - ./gradlew --continue --console=plain -x test coverage
  coverage: "/Covered (\\d{1,3}\\.\\d{2}%) of instructions for all projects\\./"
  allow_failure: true
  when: on_success
  artifacts:
    when: always
    paths:
    - $COVERAGE_REPORTS

spotbugs:
  stage: report
  cache:
    policy: pull
  script:
  - ./gradlew --continue --console=plain spotbugs
  allow_failure: true
  when: on_success
  artifacts:
    when: always
    paths:
    - $SPOTBUGS_REPORTS

deploySnapshot:
  stage: deploy
  cache:
    policy: pull
  dependencies:
  - build
  script:
  - ./gradlew --console=plain uploadArchives
  retry: 2
  when: always
  except:
  - tags

deploy:
  stage: deploy
  cache:
    policy: pull
  dependencies:
  - build
  script:
  - ./gradlew --console=plain release
  retry: 2
  when: always
  only:
  - tags
  
sendCoverage:
  stage: deploy
  cache:
    policy: pull
  dependencies:
  - coverage
  script:
  - ./gradlew --console=plain sendCoverageToCodacy
  retry: 2
  when: always

pages:
  stage: deploy
  cache:
    policy: pull
  dependencies:
  - build
  - test
  - coverage
  - spotbugs
  script:
  - for file in $JAVADOCS; do dir=public/javadoc/$(basename $file | rev | cut -d- -f-3 --complement | rev); mkdir -p $dir; unzip $file -d $dir; done
  - for file in $TEST_REPORTS; do dir=public/test/$(basename $file | rev | cut -d- -f1 --complement | rev); mkdir -p $dir; unzip $file -d $dir; done
  - for file in $COVERAGE_REPORTS; do dir=public/coverage/$(basename $file | rev | cut -d- -f1 --complement | rev); mkdir -p $dir; unzip $file -d $dir; done
  - for file in $SPOTBUGS_REPORTS; do dir=public/spotbugs/$(basename $file | rev | cut -d- -f1 --complement | rev); mkdir -p $dir; unzip $file -d $dir; done
  when: always
  artifacts:
    paths:
    - public
